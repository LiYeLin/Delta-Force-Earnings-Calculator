# .github/workflows/deploy.yml

# Workflow 的名称
name: Deploy to Tencent Cloud

# 触发条件：当有代码 push 到 main 分支时触发
on:
  push:
    branches:
      - main

# 定义一个名为 'deploy' 的任务
jobs:
  deploy:
    # 任务运行的环境，使用最新的 Ubuntu
    runs-on: ubuntu-latest

    # 任务的步骤
    steps:
      # 第1步：配置 SSH 私钥
      # 使用一个社区提供的 Action 来简化 SSH 客户端的设置
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      # 第2步：通过 SSH 连接到服务器并执行部署脚本
      - name: Deploy to Server
        run: |

          # 添加服务器到已知主机，避免首次连接的交互提示
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
          # 通过 SSH 在远程服务器上执行一连串的命令
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} '
            set -e
            # 在执行 git pull 之前，先将 github.com 的主机密钥添加到服务器的 known_hosts 文件中
            echo ">>> 0. Adding GitHub.com to known hosts..."
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            # 进入项目目录
            cd /home/data/sjz/SJZ-LC

            # 拉取 main 分支的最新代码
            echo ">>> 1. Pulling latest code..."
            git pull origin main

            # 将 GitHub Secrets 中的 .env 内容写入到服务器的 .env 文件中
            echo ">>> 2. Creating .env file..."
            echo "${{ secrets.DOT_ENV_CONTENT }}" > .env

            # 使用 Maven 进行打包
            echo ">>> 3. Packaging with Maven..."
            mvn clean package -DskipTests

            # 使用 Docker Compose 重启服务
            # --build 会强制重新构建镜像
            # -d 会在后台运行
            echo ">>> 4. Restarting services with Docker Compose..."
            docker-compose up --build -d

            # 清理无用的旧镜像，释放磁盘空间
            echo ">>> 5. Pruning old Docker images..."
            docker image prune -f

            echo ">>> Deployment successful! <<<"
          '